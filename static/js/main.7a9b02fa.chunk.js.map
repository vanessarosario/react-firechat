{"version":3,"sources":["config/firebase.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","components/Button.js","components/Message.js","components/Channel.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","message","signOut","useAuthState","useState","initializing","setInitializing","user","setUser","useEffect","onAuthStateChanged","Button","onClick","children","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","className","src","alt","title","seconds","Channel","messages","setMessages","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","autoComplete","disabled","App","renderLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a9b02fa.chunk.js","sourcesContent":["\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBPdIQ30lb8HAxTFHU9vxRMdSK6xSP1hlc\",\r\n    authDomain: \"app-chat-46e0c.firebaseapp.com\",\r\n    projectId: \"app-chat-46e0c\",\r\n    storageBucket: \"app-chat-46e0c.appspot.com\",\r\n    messagingSenderId: \"343819591460\",\r\n    appId: \"1:343819591460:web:1971c72a1eb58716fe9db1\",\r\n    measurementId: \"G-DTPYMS6FQP\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebase.firestore();\r\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\n  export {\r\n      db,\r\n      googleAuthProvider,\r\n      firebase\r\n  }\r\n\r\n","\r\nimport { \r\n    googleAuthProvider, \r\n    firebase\r\n } from \"../config/firebase\";\r\n\r\nconst signInWithGoogle = async () => {\r\n  firebase.auth().useDeviceLanguage();\r\n\r\n  try {\r\n    await firebase.auth().signInWithPopup(googleAuthProvider);\r\n  } catch (e) {\r\n    console.error(e.message);\r\n  }\r\n};\r\n\r\nexport default signInWithGoogle;\r\n","import {\r\n       firebase\r\n} from \"../config/firebase\";\r\n\r\nconst signOut = async () => {\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\n\r\nexport default signOut;\r\n\r\n"," import { useState, useEffect } from \"react\";\r\n \r\n function useAuthState(auth) {\r\n   const [initializing, setInitializing] = useState(true);\r\n   const [user, setUser] = useState(true);\r\n \r\n   useEffect(() => {\r\n     const unsubcribe = auth.onAuthStateChanged((user) => {\r\n       if (user) setUser(user);\r\n       else setUser(false);\r\n \r\n       if (initializing) setInitializing(false);\r\n     });\r\n \r\n     return unsubcribe;\r\n   }, [auth, initializing]);\r\n \r\n   return { user, initializing };\r\n }\r\n \r\n export default useAuthState;","\r\nconst Button = ({\r\n    onClick = null,\r\n    children = null\r\n}) =>\r\n(\r\n    <button onClick={onClick}> {children} </button>\r\n\r\n)\r\nexport default Button;\r\n\r\n","import { formatRelative } from \"date-fns\";\r\n\r\nconst formatDate = (date) => {\r\n    let formattedDate = \"\";\r\n    if (date) {\r\n      formattedDate = formatRelative(date, new Date());\r\n  \r\n      formattedDate =\r\n        formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n    }\r\n    return formattedDate;\r\n  };\r\n  \r\n  const Message = ({\r\n    createdAt = null,\r\n    text = \"\",\r\n    displayName = \"\",\r\n    photoURL = \"\",\r\n  }) => {\r\n    if (!text) return null;\r\n    return (\r\n      <div className=\"user\">\r\n        {photoURL ? (\r\n          <img\r\n            className=\"photo-user\"\r\n            src={photoURL}\r\n            alt=\"Avatar\"\r\n            title=\"{text}\"\r\n          />\r\n        ) : null}\r\n        {displayName ? <span className=\"name-user\">{displayName}</span> : null}\r\n        {createdAt?.seconds ? (\r\n          <span className=\"date-user\">\r\n            {formatDate(new Date(createdAt.seconds * 1000))}\r\n          </span>\r\n        ) : null}\r\n        <p className=\"mensaje-user\">{text}</p>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Message;","\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { db, firebase } from \"../config/firebase\";\r\nimport Message from \"./Message\";\r\n\r\nconst Channel = ({ user = null }) => {\r\n    const [messages, setMessages] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const query = db.collection(\"messages\").orderBy(\"createdAt\").limit(100);\r\n  \r\n      const unsubscribe = query.onSnapshot((querySnapshot) => {\r\n        //Obtiene todos los mensajes desde la bd con su ID.\r\n        const data = querySnapshot.docs.map((doc) => ({\r\n          ...doc.data(),\r\n          id: doc.id,\r\n        }));\r\n        // Actualizo los mensajes obtenidos desde la bd.\r\n        setMessages(data);\r\n      });\r\n      //CleanUp\r\n      return unsubscribe;\r\n    }, []);\r\n  \r\n    const { uid, displayName, photoURL } = user;\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const handleMessageOnChange = (e) => {\r\n      e.preventDefault();\r\n      setNewMessage(e.target.value);\r\n    };\r\n  \r\n    const messagesRef = db.collection(\"messages\");\r\n  \r\n    const handleOnSubmit = (e) => {\r\n      e.preventDefault();\r\n  \r\n      const trimmedMessage = newMessage.trim();\r\n      if (trimmedMessage) {\r\n        messagesRef.add({\r\n          text: trimmedMessage,\r\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n          uid,\r\n          displayName,\r\n          photoURL,\r\n        });\r\n        setNewMessage(\"\");\r\n      }\r\n    };\r\n  \r\n    const inputRef = useRef();\r\n    useEffect(() => {\r\n      if (inputRef.current) {\r\n        inputRef.current.focus();\r\n      }\r\n    }, [inputRef]);\r\n  \r\n    return (\r\n      <>\r\n        <div className=\"messages-container\">\r\n          {messages.map((message) => (\r\n            <p key={message.id}>\r\n              <Message {...message} />\r\n            </p>\r\n          ))}\r\n        </div>\r\n  \r\n        <form className=\"form\" onSubmit={handleOnSubmit}>\r\n          <input\r\n            className=\"mensaje\"\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            value={newMessage}\r\n            onChange={handleMessageOnChange}\r\n            placeholder=\"Escribe tu mensaje aqui...\"\r\n            autoComplete=\"off\"\r\n          />\r\n  \r\n          {/* <button className=\"btn-emoji\"></button> */}\r\n  \r\n          <button\r\n            className=\"boton btn-send\"\r\n            type=\"submit\"\r\n            disabled={!newMessage}\r\n          >\r\n            {\" \"}\r\n            Enviar{\" \"}\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default Channel;","import { signInWithGoogle, signOut } from \"./login\";\r\nimport { useAuthState } from \"./hooks\";\r\nimport { db, googleAuthProvider, firebase } from \"./config/firebase\";\r\nimport {Button, Channel} from \"./components\";\r\n \r\n\r\nfunction App() {\r\n  const { user, initializing} = useAuthState(firebase.auth());\r\n  const renderLoading = () => {\r\n    if (initializing) {\r\n      return <div>\r\n      <h1>Loading ...</h1>\r\n      </div>\r\n    }\r\n\r\n  }\r\n  return (\r\n    <div>\r\n    { renderLoading()}\r\n    {\r\n      user ? (\r\n        <>\r\n          <Button onClick={signOut} >Logout Google</Button>\r\n          <p>Bienvenidos al CHAT!</p>\r\n          <Channel user= {user} />\r\n        </>\r\n      ) : <Button onClick={signInWithGoogle} >Sign in with Google</Button>\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}